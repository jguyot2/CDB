package com.excilys.persistence;

import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;

/**
 * Classe permettant de récupérer la connexion à la base de données.
 * 
 * @author jguyot2
 * 
 */
class DBConnection {

	private Connection conn;
	private static DBConnection dbConnInstance;

	private static final String driverName = "com.mysql.cj.jdbc.Driver";
	private static final String urlDB = "jdbc:mysql://localhost:3306/";
	private static final String dbName = "computer-database-db";
	private static final String username = "admincdb";
	private static final String password = "qwerty1234";

	private DBConnection() {
		try {
			Class.forName(driverName).newInstance();
			conn = DriverManager.getConnection(urlDB + dbName, username, password);
		} catch (InstantiationException e1) {
			e1.printStackTrace();
			System.err.println(e1.getMessage());
			throw new DriverImportFailedError();
		} catch (IllegalAccessException e1) {
			e1.printStackTrace();
			System.err.println(e1.getMessage());
			throw new DriverImportFailedError();
		} catch (ClassNotFoundException e1) {
			e1.printStackTrace();
			System.err.println(e1.getMessage());
			throw new DriverImportFailedError();
		} catch (SQLException e) {
			e.printStackTrace();
			System.err.println(e.getMessage());
			throw new CouldNotConnectToDBException();
		}
	}

	public static DBConnection getConnection() {
		if (dbConnInstance == null || dbConnInstance.isClosed())
			dbConnInstance = new DBConnection();
		return dbConnInstance;
	}

	private boolean isClosed() {
		try {
			return conn == null || conn.isClosed();
		} catch (SQLException e) {
			return true;
		}
	}

	public Statement createStatement() throws SQLException {
		return this.conn.createStatement();
	}

	public PreparedStatement prepareStatement(String sqlPreparedRequest) throws SQLException {
		return this.conn.prepareStatement(sqlPreparedRequest);
	}

	public PreparedStatement prepareStatement(String sqlPreparedRequest, int autoGeneratedKeys) throws SQLException {
		return this.conn.prepareStatement(sqlPreparedRequest, autoGeneratedKeys);
	}

	public void close() throws SQLException {
		conn.close();
		conn = null;
	}
}