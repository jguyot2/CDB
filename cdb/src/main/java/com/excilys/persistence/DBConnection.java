package com.excilys.persistence;

import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 * Classe permettant de récupérer la connexion à la base de données.
 * 
 * @author jguyot2
 * 
 */
public class DBConnection {

	private Connection conn;
	private static DBConnection dbConnInstance;

	private static final String driverName = "com.mysql.cj.jdbc.Driver";
	private static final String urlDB = "jdbc:mysql://localhost:3306/";
	private static final String username = "admincdb";
	private static final String password = "qwerty1234";

	private static final String baseDBName = "computer-database-db";
	private static final String testDBName = "computer-database-db-test";

	private static final Logger logger = LoggerFactory.getLogger(ComputerUpdater.class);

	private final String dbName;
	private static boolean testMode = false;

	public boolean inTestMode() {
		return testMode;
	}

	private DBConnection() {
		logger.info("Instanciation");
		if (testMode)
			dbName = testDBName;
		else
			dbName = baseDBName;
		init();
	}

	public static final void setTestMode(boolean testMode) {
		logger.info("test <- " + testMode);
		DBConnection.testMode = testMode;
	}

	private void init() {
		logger.info("import du driver JDBC");
		try {
			Class.forName(driverName).newInstance();
			conn = DriverManager.getConnection(urlDB + dbName, username, password);
		} catch (InstantiationException e1) {
			e1.printStackTrace();
			logger.error("init : " + e1.getMessage(), e1);
			throw new DriverImportFailedError();
		} catch (IllegalAccessException e1) {
			e1.printStackTrace();
			logger.error("init : " + e1.getMessage(), e1);
			throw new DriverImportFailedError();
		} catch (ClassNotFoundException e1) {
			e1.printStackTrace();
			logger.error("init : " + e1.getMessage(), e1);
			throw new DriverImportFailedError();
		} catch (SQLException e) {
			e.printStackTrace();
			logger.error("init : " + e.getMessage(), e);
			throw new CouldNotConnectToDBException();
		}
	}

	public static DBConnection getConnection() {
		if (dbConnInstance == null || dbConnInstance.isClosed())
			dbConnInstance = new DBConnection();
		return dbConnInstance;
	}

	private boolean isClosed() {
		try {
			return conn == null || conn.isClosed();
		} catch (SQLException e) {
			logger.error("isClosed : " + e.getMessage(), e);
			return true;
		}
	}

	public Statement createStatement() throws SQLException {
		return this.conn.createStatement();
	}

	public PreparedStatement prepareStatement(String sqlPreparedRequest) throws SQLException {
		
		return this.conn.prepareStatement(sqlPreparedRequest);
	}

	public PreparedStatement prepareStatement(String sqlPreparedRequest, int autoGeneratedKeys) throws SQLException {
		return this.conn.prepareStatement(sqlPreparedRequest, autoGeneratedKeys);
	}

	public boolean reinitTestBase() {
		logger.info("Réinitialisation de la BD test");
		if (!this.inTestMode()) {
			logger.debug("Erreur : Réinitialisation de la BD en mode non test");
			throw new RuntimeException("Réinitialisation de la BD de test invalide");
		}
		
		String PATH_SQL_REINIT_FILE = "/home/jguyot2/cdb/sql_scripts/script-reinit-db-test.sql";

		try (Statement stmt = this.createStatement();
				BufferedReader fileReader = new BufferedReader(new FileReader(PATH_SQL_REINIT_FILE));) {
			String line = fileReader.readLine();
			while (line != null) {
				stmt.addBatch(line);
				line = fileReader.readLine();
			}
			stmt.executeBatch();
			return true;
		} catch (SQLException e) {
			logger.debug("Réinitialisation de la BD : " + e.getMessage(), e);
			e.printStackTrace();
		} catch (IOException e) {
			logger.debug("Réinitialisation de la BD : " + e.getMessage(), e);
			e.printStackTrace();
		}
		return false;
	}
	
	public void close() throws SQLException {
		if(conn == null)
			return;
		conn.close();
		conn = null;
	}
}